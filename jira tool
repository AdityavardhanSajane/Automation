import threading
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from jira import JIRA

# Jira Configuration (Replace with actual credentials)
JIRA_URL = "https://your-jira-instance.atlassian.net"
JIRA_EMAIL = "your.email@example.com"
JIRA_API_TOKEN = "your_api_token"

# Function to create Jira ticket
def create_jira_ticket():
    result_label.config(text="Creating ticket...", fg="blue")
    
    def task():
        try:
            # Connect to JIRA
            jira = JIRA(server=JIRA_URL, basic_auth=(JIRA_EMAIL, JIRA_API_TOKEN))
            
            # Get user inputs
            project = project_var.get()
            issue_type = issue_type_var.get()
            priority = priority_var.get()
            component = component_var.get()
            labels = labels_entry.get().split(",")  # Convert CSV input into a list
            assignee = assignee_entry.get().strip()
            summary = summary_entry.get()
            description = desc_entry.get("1.0", tk.END).strip()
            
            # Prepare issue data
            issue_dict = {
                'project': {'key': project},
                'issuetype': {'name': issue_type},
                'priority': {'name': priority},
                'summary': summary,
                'description': description,
                'labels': labels if labels[0] else [],
            }
            
            # Add component if selected
            if component:
                issue_dict['components'] = [{'name': component}]

            # Add assignee if provided
            if assignee:
                issue_dict['assignee'] = {'name': assignee}

            # Create issue
            new_issue = jira.create_issue(fields=issue_dict)

            # Upload attachments if provided
            for file in selected_files:
                jira.add_attachment(issue=new_issue, attachment=open(file, "rb"))

            result_label.config(text=f"Ticket created successfully: {new_issue.key}", fg="green")
            messagebox.showinfo("Success", f"Ticket {new_issue.key} created successfully!")

        except Exception as e:
            result_label.config(text=f"Error: {str(e)}", fg="red")
            messagebox.showerror("Error", str(e))

    # Run Jira ticket creation in a new thread
    threading.Thread(target=task, daemon=True).start()

# Function to select attachment files
def select_files():
    global selected_files
    selected_files = filedialog.askopenfilenames(title="Select Files")
    file_label.config(text=f"Selected: {', '.join(selected_files)[:50]}...")  # Show first 50 chars

# Tkinter GUI
root = tk.Tk()
root.title("JIRA Ticket Creator")
root.geometry("500x600")

# Dropdown options
projects = ["PROJ1", "PROJ2", "PROJ3"]
issue_types = ["Task", "Bug", "Story"]
priorities = ["Major", "Minor", "Critical", "Blocker"]
components = ["Frontend", "Backend", "Database"]

# UI Elements
tk.Label(root, text="Project:").pack()
project_var = tk.StringVar()
ttk.Combobox(root, textvariable=project_var, values=projects).pack()

tk.Label(root, text="Issue Type:").pack()
issue_type_var = tk.StringVar()
ttk.Combobox(root, textvariable=issue_type_var, values=issue_types).pack()

tk.Label(root, text="Priority:").pack()
priority_var = tk.StringVar()
ttk.Combobox(root, textvariable=priority_var, values=priorities).pack()

tk.Label(root, text="Component:").pack()
component_var = tk.StringVar()
ttk.Combobox(root, textvariable=component_var, values=components).pack()

tk.Label(root, text="Labels (comma-separated):").pack()
labels_entry = tk.Entry(root, width=50)
labels_entry.pack()

tk.Label(root, text="Assignee (optional):").pack()
assignee_entry = tk.Entry(root, width=50)
assignee_entry.pack()

tk.Label(root, text="Summary:").pack()
summary_entry = tk.Entry(root, width=50)
summary_entry.pack()

tk.Label(root, text="Description:").pack()
desc_entry = tk.Text(root, width=50, height=5)
desc_entry.pack()

# File Attachment Section
tk.Button(root, text="Select Attachments", command=select_files).pack(pady=5)
file_label = tk.Label(root, text="No files selected")
file_label.pack()

# Submit Button
tk.Button(root, text="Create Ticket", command=create_jira_ticket).pack(pady=10)

# Result Label
result_label = tk.Label(root, text="")
result_label.pack()

# Start Tkinter GUI
selected_files = []
root.mainloop()
